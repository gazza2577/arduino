menu "LCC Configuration"
    config LCC_NODE_ID
        hex "Node ID"
        default 0x05020103F000
        help 
            This is the LCC node identifier for the ESP32 Command Station.
            It is recommended, but not required, to request your own ID
            range via:
            https://registry.openlcb.org/requestuniqueidrange
            The default node ID is part of a reserved range of ID values.

    config LCC_CAN_RX_PIN
        int "CAN RX Pin"
        range -1 39
        default -1
        help
            This is the ESP32 pin connected to the SN6565HVD23x/MCP2551 R (RX) pin.
            NOTE: Setting this to a value other than -1 will require an externally
            connected CAN transceiver IC.

    config LCC_CAN_TX_PIN
        int "CAN TX Pin"
        range -1 33
        default -1
        help
            This is the ESP32 pin connected to the SN6565HVD23x/MCP2551 D (TX) pin.
            NOTE: Setting this to a value other than -1 will require an externally
            connected CAN transceiver IC.

    config LCC_PRINT_ALL_PACKETS
        bool "Print all packets"
        default n
        depends on !LCC_TCP_STACK
        help
            Enabling this option will cause all LCC packets to be printed to
            the serial console.

    config LCC_GC_NEWLINES
        bool "Add newline to GridConnect packets"
        default y if LCC_PRINT_ALL_PACKETS
        default n
        depends on !LCC_TCP_STACK
        help
            Enabling this option will generate a newline character after
            every GridConnect packet that is sent out. This is generally
            only needed for debug purposes.
        
    config LCC_FACTORY_RESET
        bool "Perform LCC Factory reset on startup"
        default n
        help
            Enabling this option will force the removal of the cached CDI
            and node configuration files on every startup of the node. This
            is generally not required or recommended.

    config LCC_MEMORY_SPACES
        int "MemoryConfig space limit"
        default 10
        help
            Maximum number of memory spaces that can be registered for the
            MemoryConfig datagram handler.

    config LCC_EXECUTOR_SELECT_PRESCALER
        int "StateFlows to execute between select() calls"
        range 5 300
        default 60
        help
            Executors will run this many Executables (if there is anything
            scheduled) before two calls to select. This helps in reducing the
            overhead of the select calls.

    config LCC_LOCAL_NODE_COUNT
        int "Number of 'local' LCC nodes"
        default 30
        help
            This controls how many trains will be supported concurrently by
            the command station.

    config LCC_SD_FSYNC_SEC
        int "Automatic fsync() interval (seconds)"
        default 10
        help
            For some file systems (SD only currently) it is required to call
            fsync() to force synchronize file changes to the file system due to
            small file size. In the case of the SD file system any file
            modification smaller than 512 bytes will remain in the in-memory
            cache and not be persisted to the SD card without a call to fsync()
            or close(). In the case of the LCC CDI file, the CDI file remains
            open for the lifetime of the application.

    config LCC_GC_DELAY_USEC
        int "GridConnect packet delay (microseconds)"
        default 1500 if LCC_USE_SELECT
        default 500
        depends on !LCC_TCP_STACK
        help
            How long (in microseconds) to buffer generated gridconnect data
            before sending off to the lowlevel system (such as a TCP socket).

    config LCC_GC_OUTBOUND_PACKET_LIMIT
        int "GridConnect packet count limit"
        default 2
        depends on !LCC_TCP_STACK
        help
            Number of pending buffers (of type string) in the outgoing hub on a
            per-connection basis. This limit ensures that we don't leak memory
            if the output socket cannot send the data fast enough.

    config LCC_TCP_STACK
        bool
        default n
        help
            By default the CS will use SimpleCanStack which supports both
            hardware CAN and TCP/IP GridConnect formatted packets. Enabling
            this option will shift to only support TCP/IP Binary packets.

    config LCC_USE_SELECT
        bool "Use select() for TCP/IP connections"
        default n
        help
            By enabling this option OpenMRN will use select() to detect when a
            TCP/IP connection is ready to be serviced. When not enabled two
            extra threads are created for servicing the TCP/IP connection.
            NOTE: Starting with IDF v4.2 this will be used regardless of this
            setting.
endmenu

# note: nextion is not supported for v1.5.0
config NEXTION
    bool
    default n
    help
        The Nextion HMI interface provides a throttle interface
        directly connected to the ESP32 Command Station.

menu "Nextion HMI Configuration"
    depends on NEXTION

    config NEXTION_RX_PIN
        int "RX Pin (blue)"
        range 0 39
        default 14
        help
            This should be connected to the TX pin on the Nextion HMI,
            typically the blue wire.

    config NEXTION_TX_PIN
        int "TX Pin (yellow)"
        range 0 32
        default 27
        help
            This should be connected to the RX pin on the Nextion HMI,
            typically the yellow wire.

    config NEXTION_BAUD_RATE
        int "BAUD rate"
        default 115200
        help
            This must match the "bauds=XXX" value set in the Nextion
            HMI initialization event.

    choice NEXTION_UART
        bool "Hardware UART to use for the Nextion HMI"
        default NEXTION_UART_UART1
        config NEXTION_UART_UART1
            bool "UART1"
            depends on !OPS_RAILCOM_UART1 && !HC12_UART_UART1
        config NEXTION_UART_UART2
            bool "UART2"
            depends on !OPS_RAILCOM_UART2 && !HC12_UART_UART2
    endchoice

    config NEXTION_UART
        int
        default 1 if NEXTION_UART_UART1
        default 2 if NEXTION_UART_UART2

endmenu

# TODO: move this to LocoRoster component when created.
menu "Locomotive Roster"

    config ROSTER_AUTO_IDLE_NEW_LOCOS
        bool "Automatically Idle newly created locomotives"
        default n
        help
            By enabling this option, when any train is newly added to the
            roster it will default to automatic idle.

    config ROSTER_AUTO_CREATE_ENTRIES
        bool "Create a roster entry for new trains on first use"
        default y
        help
            By enabling this option, any train that is requested that does not
            already exist in the locomotive roster will be automatically added
            to the roster using DCC 128 speed step mode.

    config ROSTER_PERSISTENCE_INTERVAL_SEC
        int "Locomotive roster persistence interval (seconds)"
        default 30
        help
            Any changes to locomotives in the roster will be persisted after
            this many seconds to persistant storage (SPIFFS or SD). This is
            done to minimize the number of write operations when roster entries
            are modified.

endmenu

config ESP32CS_CDI_VERSION
    hex
    default 0x0150

config ESP32CS_HW_VERSION
    string
    default "ESP32-v1"

config ESP32CS_SW_VERSION
    string
    default "1.5.0"